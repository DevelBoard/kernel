From 71b5eedeff9cd5f5036a4c00f19155a2a6f52aca Mon Sep 17 00:00:00 2001
From: Giovanni Bajo <rasky@develer.com>
Date: Fri, 27 Nov 2015 01:51:21 +0100
Subject: [PATCH] Add dboard_net_discover command to configure nfs/tftp
 services
Organization: Develer S.r.l.

---
 commands/dboard.c | 166 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 166 insertions(+)

diff --git a/commands/dboard.c b/commands/dboard.c
index 0f49a3b..fa8e059 100644
--- a/commands/dboard.c
+++ b/commands/dboard.c
@@ -20,6 +20,8 @@
 #include <fcntl.h>
 #include <getopt.h>
 #include <gpio.h>
+#include <linux/err.h>
+#include <net.h>
 #include <string.h>
 #include <mach/iomux.h>
 
@@ -222,3 +224,167 @@ BAREBOX_CMD_START(dboard_info)
 	BAREBOX_CMD_COMPLETE(empty_complete)
 	BAREBOX_CMD_HELP(cmd_dboard_info_help)
 BAREBOX_CMD_END
+
+
+/******************************************************************************
+ * dboard_net_discover
+ ******************************************************************************/
+
+#define PORT_DISCOVER         13992
+
+#define DISCOVER_SERVICE_NFS  1
+#define DISCOVER_SERVICE_TFTP 2
+
+#define DP_OP_REQUEST 1
+#define DP_OP_REPLY 2
+
+#define DISCOVER_STATE_SEARCHING 1
+#define DISCOVER_STATE_FOUND 2
+
+static uint64_t discover_start;
+static int discover_service;
+static struct net_connection *discover_con;
+static char discover_serial[32];
+static int discover_state;
+static IPaddr_t discover_serverip;
+
+struct discoverpkt {
+	uint8_t dp_op;
+	uint8_t dp_service;
+	uint16_t dp_spare1;     /* alignment */
+	char dp_serial[32];
+};
+
+static int discover_request(int service)
+{
+	unsigned char *payload = net_udp_get_payload(discover_con);
+	struct discoverpkt *dp;
+
+	debug("netdiscover broadcast\n");
+
+	dp = (struct discoverpkt *)payload;
+	dp->dp_op = DP_OP_REQUEST;
+	dp->dp_service = (uint8_t)service;
+	memcpy(dp->dp_serial, discover_serial, 32);
+
+	return net_udp_send(discover_con, sizeof(*dp));
+}
+
+static void discover_handler(void *ctx, char *packet, unsigned int len) {
+	struct discoverpkt *dp = (struct discoverpkt *)net_eth_to_udp_payload(packet);
+	struct iphdr *iph = net_eth_to_iphdr(packet);
+
+	len = net_eth_to_udplen(packet);
+
+	if (discover_state != DISCOVER_STATE_SEARCHING) {
+		return;
+	}
+
+	if (dp->dp_op != DP_OP_REPLY || dp->dp_service != discover_service) {
+		return;
+	}
+	if (strncmp(dp->dp_serial, discover_serial, 32)) {
+		debug("DiscoverHandler: invalid serial, ignoring\n");
+		return;
+	}
+
+	discover_serverip = net_read_ip((void*)&iph->saddr);
+	discover_state = DISCOVER_STATE_FOUND;
+}
+
+
+static int do_dbnetdiscover(int argc, char *argv[])
+{
+	int ret = 0;
+	int retries = 8;
+	uint8_t mac[6];
+
+	if (argc < 2) {
+		fprintf(stderr, "error: service not specified\n");
+		return 1;
+	}
+
+	if (!strcmp(argv[1], "nfs")) {
+		discover_service = DISCOVER_SERVICE_NFS;
+	} else if (!strcmp(argv[1], "tftp")) {
+		discover_service = DISCOVER_SERVICE_TFTP;
+	} else {
+		fprintf(stderr, "error: service unknown\n");
+		return 1;
+	}
+
+	ret = do_read_mac(mac);
+	if (ret) {
+		fprintf(stderr, "cannot read eeprom: %d\n", ret);
+		return 1;
+	}
+
+	memset(discover_serial, 0, sizeof(discover_serial));
+	sprintf(discover_serial, "%02X%02X%02X", mac[3],mac[4],mac[5]);
+
+	discover_con = net_udp_new(0xffffffff, PORT_DISCOVER, discover_handler, NULL);
+	if (IS_ERR(discover_con)) {
+		ret = PTR_ERR(discover_con);
+		goto out;
+	}
+
+	ret = net_udp_bind(discover_con, PORT_DISCOVER);
+	if (ret)
+		goto out1;
+
+	discover_start = get_time_ns();
+
+	ret = discover_request(discover_service);
+	if (ret)
+		goto out1;
+
+	discover_state = DISCOVER_STATE_SEARCHING;
+	while (discover_state != DISCOVER_STATE_FOUND) {
+		if (ctrlc()) {
+			ret = -EINTR;
+			goto out1;
+		}
+
+		if (!retries) {
+			ret = -ETIMEDOUT;
+			goto out1;
+		}
+
+		net_poll();
+		if (is_timeout(discover_start, 1 * SECOND)) {
+			discover_start = get_time_ns();
+			printf("T ");
+			ret = discover_request(discover_service);
+			retries--;
+			if (ret)
+				goto out1;
+		}
+	}
+
+	printf("Found server IP: %s\n", ip_to_string(discover_serverip));
+	net_set_serverip(discover_serverip);
+
+out1:
+	net_unregister(discover_con);
+
+out:
+	if (ret)
+		debug("discover failed: %s\n", strerror(-ret));
+
+	return ret;
+}
+
+
+BAREBOX_CMD_HELP_START(dboard_net_discover)
+BAREBOX_CMD_HELP_TEXT("dboard_net_discover <service>")
+BAREBOX_CMD_HELP_TEXT("")
+BAREBOX_CMD_HELP_TEXT("Service can be either \"nfs\" or \"tftp\"")
+BAREBOX_CMD_HELP_END
+
+BAREBOX_CMD_START(dboard_net_discover)
+	.cmd		= do_dbnetdiscover,
+	BAREBOX_CMD_DESC("Discover network services exposed by the dboard tool")
+	BAREBOX_CMD_OPTS("SERVICE")
+	BAREBOX_CMD_GROUP(CMD_GRP_NET)
+	BAREBOX_CMD_COMPLETE(command_var_complete)
+BAREBOX_CMD_END
-- 
1.9.1

