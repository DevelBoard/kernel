From 4e2ad757b5fa67fa7c976104d9f7acf8fd38e878 Mon Sep 17 00:00:00 2001
From: Mirko Damiani <mirko@develer.com>
Date: Mon, 2 Nov 2015 15:05:28 +0100
Subject: [PATCH] dboard command for nand write protection
Organization: Develer S.r.l.

---
 commands/Kconfig  |  8 ++++++++
 commands/Makefile |  1 +
 commands/dboard.c | 53 +++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 62 insertions(+)
 create mode 100644 commands/dboard.c

diff --git a/commands/Kconfig b/commands/Kconfig
index 630cb12..26683dd 100644
--- a/commands/Kconfig
+++ b/commands/Kconfig
@@ -1952,6 +1952,14 @@ config CMD_WD_DEFAULT_TIMOUT
 	  'wd' is done without a timeout value (which means the watchdog gets
 	  enabled and re-triggered with the default timeout value).
 
+config CMD_DBOARD_UTILS
+	bool
+	depends on ARCH_SAMA5D4
+	prompt "dboard command utilities"
+	help
+	  Enable some DevelBoard command utilities,
+	  which name starts with "dboad_".
+
 # end Hardware manipulation commands
 endmenu
 
diff --git a/commands/Makefile b/commands/Makefile
index 3d594c3..8d57500 100644
--- a/commands/Makefile
+++ b/commands/Makefile
@@ -114,3 +114,4 @@ obj-$(CONFIG_CMD_STATE)		+= state.o
 obj-$(CONFIG_CMD_DHCP)		+= dhcp.o
 obj-$(CONFIG_CMD_DHRYSTONE)	+= dhrystone.o
 obj-$(CONFIG_CMD_SPD_DECODE)	+= spd_decode.o
+obj-$(CONFIG_CMD_DBOARD_UTILS)	+= dboard.o
diff --git a/commands/dboard.c b/commands/dboard.c
new file mode 100644
index 0000000..12a5e08
--- /dev/null
+++ b/commands/dboard.c
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2015 Mirko Damiani <mirko@develer.com>, Develer
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#include <common.h>
+#include <command.h>
+#include <errno.h>
+#include <gpio.h>
+#include <string.h>
+#include <mach/iomux.h>
+
+
+static int do_dboard_nand_protect(int argc, char **argv)
+{
+	const char *action = argv[1];
+	const char *on = "on";
+	const char *off = "off";
+	int value, ret;
+
+	if (argc != 2)
+		return COMMAND_ERROR_USAGE;
+
+	if (memcmp(action, on, strlen(on)) == 0)
+		value = 0;
+	else if (memcmp(action, off, strlen(off)) == 0)
+		value = 1;
+	else
+		return COMMAND_ERROR_USAGE;
+
+	ret = gpio_direction_output(AT91_PIN_PD18, value);
+	if (ret) {
+		printf("ERROR: could not drive NAND write protection gpio: %s\n", errno_str());
+		return 1;
+	}
+
+	return 0;
+}
+
+BAREBOX_CMD_START(dboard_nand_protect)
+	.cmd		= do_dboard_nand_protect,
+	BAREBOX_CMD_DESC("Enables or disables NAND write protection")
+	BAREBOX_CMD_OPTS("[on|off]")
+	BAREBOX_CMD_GROUP(CMD_GRP_HWMANIP)
+BAREBOX_CMD_END
-- 
1.9.1

